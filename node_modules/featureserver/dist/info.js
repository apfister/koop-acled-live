var Utils = require('./utils.js')
var ref = require('./templates');
var renderLayer = ref.renderLayer;
var renderServer = ref.renderServer;
var ref$1 = require('./geometry');
var geometryMap = ref$1.geometryMap;

module.exports = { serverInfo: serverInfo, layerInfo: layerInfo, layersInfo: layersInfo }

function serverInfo (server, params) {
  if ( params === void 0 ) params = {};

  var layers
  if (server.type === 'FeatureCollection') {
    layers = [server]
  } else {
    layers = server.layers
  }
  server.extent = server.extent || Utils.getExtent(layers[0])

  var serverLayers = layers.reduce(
    function (collection, layer, i) {
      var info = serverLayerInfo(layer, i)
      if (info.geometryType) { collection.layers.push(info) }
      else { collection.tables.push(info) }
      return collection
    },
    { layers: [], tables: [] }
  )

  return renderServer(server, serverLayers)
}

function layerInfo (geojson, params) {
  params.extent = Utils.getExtent(geojson)
  params.geometryType = Utils.getGeomType(geojson)
  return renderLayer(geojson, params)
}

function serverLayerInfo (geojson, id) {
  if ( geojson === void 0 ) geojson = {};

  var metadata = geojson.metadata || {}
  var geometryType = metadata.geometryType || Utils.getGeomType(geojson)
  return {
    id: id,
    name: geojson.metadata.name,
    parentLayerId: -1,
    defaultVisibility: true,
    subLayerIds: null,
    minScale: 0,
    maxScale: 0,
    geometryType: geometryMap[geometryType] || geometryType
  }
}

/**
 * deals with `/layers` method call
 *
 * @param {object} data
 * @param {object} params
 */
function layersInfo (data, params) {
  if ( params === void 0 ) params = {};

  var layerJson
  var json
  if (!data.length) {
    params.extent = Utils.getExtent(data)
    var metadata = data.metadata || {}
    params.geometryType = metadata.geometryType || Utils.getGeomType(data)
    layerJson = renderLayer(data, params)
    json = { layers: [layerJson], tables: [] }
  } else {
    json = { layers: [], tables: [] }
    data.forEach(function (layer, i) {
      params.extent = Utils.getExtent(layer)
      var metadata = layer.metadata || {}
      params.geometryType = metadata.geometryType || Utils.getGeomType(layer)
      layerJson = renderLayer(layer, params)
      // TODO move this to a rendered template
      layerJson.id = i
      json.layers.push(layerJson)
    })
  }
  return json
}
