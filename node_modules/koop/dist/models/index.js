function Model (options) {
  this.cache = options.cache
}

Model.prototype.pull = function (req, callback) {
  var this$1 = this;

  var key = createKey(req)
  this.cache.retrieve(key, req.query, function (err, cached) {
    if (!err && isFresh(cached)) {
      callback(null, cached)
    } else {
      this$1.getData(req, function (err, data) {
        if (err) { return callback(err) }
        callback(null, data)
        if (data.ttl) { this$1.cache.upsert(key, data, {ttl: data.ttl}) }
      })
    }
  })
}

function createKey (req) {
  var key = req.url.split('/')[1]
  if (req.params.host) { key = [key, req.params.host].join('::') }
  if (req.params.id) { key = [key, req.params.id].join('::') }
  return key
}

function isFresh (geojson) {
  if (!geojson || !geojson.metadata || !geojson.metadata.expires) { return true }
  else { return Date.now() < geojson.metadata.expires }
}

module.exports = Model
